// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MyWoshSessionAPITest.API.Data
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MyWoshSessionDataServiceAPI.
    /// </summary>
    public static partial class MyWoshSessionDataServiceAPIExtensions
    {
            /// <summary>
            /// Get all active sessions
            /// </summary>
            /// <remarks>
            /// List of current active sessions or empty array if no session are present
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<SessionData> ApiDataSessionsGet(this IMyWoshSessionDataServiceAPI operations)
            {
                return operations.ApiDataSessionsGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all active sessions
            /// </summary>
            /// <remarks>
            /// List of current active sessions or empty array if no session are present
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SessionData>> ApiDataSessionsGetAsync(this IMyWoshSessionDataServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDataSessionsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an active session
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static SessionData ApiDataSessionByIdGet(this IMyWoshSessionDataServiceAPI operations, string id)
            {
                return operations.ApiDataSessionByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an active session
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionData> ApiDataSessionByIdGetAsync(this IMyWoshSessionDataServiceAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDataSessionByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing session
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static SessionData ApiDataSessionByIdPut(this IMyWoshSessionDataServiceAPI operations, string id)
            {
                return operations.ApiDataSessionByIdPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing session
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionData> ApiDataSessionByIdPutAsync(this IMyWoshSessionDataServiceAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDataSessionByIdPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an active session
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static bool? ApiDataSessionByIdDelete(this IMyWoshSessionDataServiceAPI operations, string id)
            {
                return operations.ApiDataSessionByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an active session
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiDataSessionByIdDeleteAsync(this IMyWoshSessionDataServiceAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDataSessionByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new session
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static SessionData ApiDataSessionPost(this IMyWoshSessionDataServiceAPI operations, SessionData value = default(SessionData))
            {
                return operations.ApiDataSessionPostAsync(value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new session
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionData> ApiDataSessionPostAsync(this IMyWoshSessionDataServiceAPI operations, SessionData value = default(SessionData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDataSessionPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
